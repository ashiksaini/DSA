/**			(26-05-2021)	KMP ALGORITHM
  *
  *			TC : O(n)		n = text length
  *			AS : O(m)		m = pattern length
  *			
  */

#include <bits/stdc++.h>

using namespace std;

void kmp(string txt, string pat, int *lps) {
	int i = 0, j = 0;
	while(i < txt.size()) {
		if(txt[i] == pat[j]) {
			i++, j++;
		}
		if(j == pat.size()) {
			cout << i - j + 1<< " ";
			j = lps[j - 1];
		}
		else if(i < txt.size() && pat[j] != txt[i]){
			if(j == 0) {
				i++;
			}
			else
				j = lps[j - 1];
		}
	}

}

void fillLps(string s, int *lps) {
	lps[0] = 0;
	int len = 0;
	int i = 1;
	while(i < s.size()) {
		if(s[i] == s[len]) {
			len++;
			lps[i] = len;
			i++;
		}
		else {
			if(len == 0) {
				lps[i] = 0;
				i++;
			}
			else {
				len = lps[len - 1];
			}
		}
	}
}

int main() {
	
	string text, pattern;
	cin >> text >> pattern;
	
	transform(text.begin(), text.end(), text.begin(), :: tolower);
	transform(pattern.begin(), pattern.end(), pattern.begin(), :: tolower);
	
	int lps[pattern.size()];
	
	fillLps(pattern, lps);
	kmp(text, pattern, lps);

	return 0;
}
