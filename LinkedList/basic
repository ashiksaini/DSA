/**			02-06-2021		LINKED LIST 
  */

#include <bits/stdc++.h>	
#include <windows.h>

using namespace std;

struct Node {
	int data;
	Node *next;
	
	Node (int x) {
		data = x;
		next = NULL;
	}
};

Node *head;
Node *last;
	
// Insert at the beginning of the list 
// TC : O(1)
void insertbegin() {
	
	int val;
	cout << "\n Enter Data : ";
	cin >> val;
	
	Node *temp = new Node(val);
	
	// if the list is empty
	if(head == NULL) {
		head = temp;
		last = temp;
		goto l1;
	}
	
	temp->next = head;
	head = temp;	
	
	l1 : 	cout << " Node Inserted";
	Sleep(500);
}

// Insert at the end of the list 
// TC : O(1)
void insertend() {
	
	int val;
	cout << "\n Enter Data : ";
	cin >> val;
	
	Node *temp = new Node(val);
	
	//if the list is empty
	if(head == NULL) {
		head = temp;
		last = temp;
		goto l1;
	}
	
	last->next = temp;
	last = temp;
	
	l1 : 	cout << " Node Inserted";
	Sleep(500);
}

// insert at your choice
// TC : O(pos - 2)
void insertchoice() {
	
	int pos;
	cout << "\n Enter position where you want to insert : ";
	cin >> pos;
	
	pos -= 2;
	if(pos < 0) {
		insertbegin();
		return;
	}
	
	int data;
	cout << "\n Enter data : ";
	cin >> data;	
	
	Node* temp = new Node(data);
	
	Node* curr = head;
	while(pos != 0 && curr != NULL) {
		curr = curr->next;
		pos --;
	}
	
	if(curr == NULL) {
		cout << "List limit exceeded";
		return;
	}
	
	temp->next = curr->next;
	curr->next = temp;
	
	cout << " Node Inserted";
	Sleep(500);
} 

// deletion at the beginning
// TC : O(1)
void deletebegin() {
	
	if(head == NULL) {
		cout << "List is Empty";
		return;
	}
	
	head = head->next;
	cout << " Node Deleted";
	Sleep(500);
}

// deletion at the end
// TC : O(n)
void deleteend() {
	
	if(head == NULL) {
		cout << "List is Empty";
		return;
	}
	
	if(head == last) {
		delete (head);
		delete (last);
		cout << " Node Deleted";
		return;
	}
	
	Node* curr = head;
	while(curr->next != last) {
		curr = curr->next;
	}
	
	delete last;
	last = curr;
	last->next = NULL;
	
	cout << " Node Deleted";
	Sleep(500);	
}

// delete from ypur choice
// TC : O(pos - 2)

void deletechoice() {
	
	int ele;
	cout << "\n Enter the element you want to delete : ";
	cin >> ele;
	
	Node* curr = head;
	Node* prev = NULL;
	while(curr != NULL) {
		if(curr->data == ele) {
			break;
		}
		prev = curr;
		curr = curr->next;
	}
	
	if(curr == last) {
		prev->next = curr->next;
		last = prev;	
		delete curr;
		goto l;
	}
	
	prev->next = curr->next;
	delete curr;
	
	l : cout << " Node Deleted";
	Sleep(500);	
}

int search() {
	return -1;
}

// list display 
void display() {
	
	if(head == NULL) {
		cout << "List is Empty";
		return;
	}
	
	Node* curr = head;
	while(curr != NULL) {
		if(curr == last) 
			cout << curr->data;
		else
			cout << curr->data << " --> ";
			
		curr = curr->next;
	}

	Sleep(3000);
}


int main() {
	
	while(1) {
	
		mainmenu :
		system("cls");
		cout << "**** Menu **** \n";
		cout << "\n1. Insert a node";
		cout << "\n2. Delete a node";
		cout << "\n3. Display List";
		cout << "\n4. Search";
		cout << "\n4. Exit";
		
		int choice;
		cout << "\n\n	Enter your choice : ";
		cin >> choice;
		
		switch(choice) {
			case 1 : 
					 while(1) {
						 system("cls");
						 cout << "**** Insert Menu ****\n";
						 cout << "\n1. Insertion at beginning";
						 cout << "\n2. Insertion at end";
						 cout << "\n3. Insertion at your choice";
						 cout << "\n4. Goto Main Menu";

						 
						 int inchoice;
						 cout << "\n\n	Enter your choice : ";
						 cin >> inchoice;
						 
						 switch(inchoice) {
							case 1 : insertbegin();		break;
							case 2 : insertend();		break;
							case 3 : insertchoice();	break;
							case 4 : goto mainmenu;
							default : cout << "\n\n\t\t\tInvalid Choice";
						 }
					}
					
					break;
					 
			case 2 : 
					 while(1) {
				 		 system("cls");
						 cout << "**** Delete Menu ****\n";
						 cout << "\n1. Deletion from beginning";
						 cout << "\n2. Deletion from end";
						 cout << "\n3. Delete Element";
						 cout << "\n4. Goto Main Menu";

						 
						 int dechoice;
					 	 cout << "\n\n	Enter your choice : ";
						 cin >> dechoice;
						 
						 switch(dechoice) {
						 	case 1 : deletebegin();		break;
						 	case 2 : deleteend();		break;
						 	case 3 : deletechoice();	break;
							case 4 : goto mainmenu;
						 	default : cout << "\n\n\t\t\tInvalid Choice";
						}
					}
					
					break;
				
			case 3 : system("cls");
					 display();
					 break;
					 
			case 4 : int k = search();
					 if(k == -1) {
					 	cout << "\n Element not found";
					 }
					 else {
					 	cout << "\n Element found at .." << k;
					 }
					 break;
			
			case 5 : exit(0);
			
			default : cout << "\n\n\t\t\tInvalid Choice";			
		}
	}

	return 0;
}
