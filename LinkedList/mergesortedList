1. Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* first = l1;
        ListNode* second = l2;
        
        if(first == NULL && second == NULL) {
            return NULL;
        } else if(first == NULL) {
            return second;
        } else if(second == NULL) {
            return first;
        }
        
        ListNode* head = new ListNode();
        if(first->val >= second->val) {
            head = second;
            second = second->next;
        } else {
            head = first;
            first = first->next;
        }
        
        ListNode* last = head;
        
        while(first != NULL && second != NULL) {
            if(first->val >= second->val) {
                last->next = new ListNode(second->val);
                second = second->next;
            } else {
                last->next = new ListNode(first->val);
                first = first->next;
            }
            
            last = last->next;
        }
        
        if(first != NULL) {
            last->next = first;
        } else {
            last->next = second;
        }
        return head;
    }
};
