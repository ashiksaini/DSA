/**
  * Bellman Ford Algorithm
  */
#include<bits/stdc++.h>
 
#define ff          first
#define ss          second
#define ll          long long
#define mod         ll 1e9 + 7
#define ps(x, y)    fixed << setprecision(y) << x
#define deb(...)    " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
 
using namespace std;
const int MAX = 100000;
vector<tuple<int, int, int>> edgeList;

void bellman_ford(int nodes, int src) {
    vector<int> distance(nodes, INT32_MAX);
    vector<int> parent(nodes, -1);
    
    distance[src] = 0;
    for (int cnt = 0; cnt < nodes - 1; cnt ++) {
        for(auto x : edgeList) {
            int u = get<0>(x);
            int v = get<1>(x);
            int w = get<2>(x);

            if(distance[u] != INT32_MAX && distance[v] > distance[u] + w) {
                distance[v] = distance[u] + w;
                parent[v] = u;
            }
        }
    }

    for(auto x : edgeList) {
        int u = get<0>(x);
        int v = get<1>(x);
        int w = get<2>(x);

        if(distance[u] != INT32_MAX && distance[v] > distance[u] + w) {
            cout << "This graph contain negative cycle";
        }
    }    

    cout << "\n[Distnace]\n";
    for(int i = 0; i < nodes; i++) {
        cout << distance[i] << " ";
    }
}

void solve() {
    int nodes, edges;
    cin >> nodes >> edges;

    while(edges --) {
        int u, v, w;
        cin >> u >> v >> w;

        edgeList.push_back({u, v, w});
    }

    int src;
    cin >> src;
    bellman_ford(nodes, src);
}
 
void start()            
{
    ios_base::sync_with_stdio(false); cin.tie(NULL);
 
    #ifndef ONLINE_JUDGE
        // file input
            freopen("input.txt", "r", stdin);
        // output file
            freopen("output.txt", "w",stdout);
    #endif
 
}
 
int main()
{
    start();

    int tt = 1;
    // cin >> tt;
 
    while(tt--)
    {
        solve();
    }
 
    return 0;
}
