/**
  * Kosaraju Strongly connected compenent
  */
#include<bits/stdc++.h>
 
#define ff          first
#define ss          second
#define ll          long long
#define mod         ll 1e9 + 7
#define ps(x, y)    fixed << setprecision(y) << x
#define deb(...)    " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "
 
using namespace std;
const int MAX = 100000;
vector<int> adj[10001];
vector<int> transposeadj[10001];
stack<int> s;
bool l = false;

void printing(int nodes, vector<int> adjj[] = adj) {
    for (int i = 0; i <= nodes; i++){
        cout << i << " ---> ";
        for(auto x : adjj[i]) {
            cout << x << " ";
        }

        cout << "\n";
    }
}

void dfs(int src, vector<bool> &visited) {

    if(l) {
        cout << src << " ";
        visited[src] = true;
        for(auto x : transposeadj[src]) {
            if(!visited[x]) {
                dfs(x, visited);
            }
        }
    }
    
    else {
        visited[src] = true;
        for(auto x : adj[src]) {
            if(!visited[x]) {
                dfs(x, visited);
            }
        }
        
        s.push(src);
    }
}

vector<int> dfsHelper(int nodes) {
    vector<bool> visited(nodes + 1, false);

    for (int i = 0; i <= nodes; i++) {
        if(!visited[i]) {
            dfs(i, visited);
        }
    }

    vector<int> decOutTime;
    while(!s.empty()) {
        decOutTime.push_back(s.top());
        s.pop();
    }

    return decOutTime;
}

void stronglyConnectedCompenent(int nodes) {
    vector<int> decOutTime = dfsHelper(nodes);
    // for(auto x : decOutTime) {
    //     cout << x << " ";
    // }

    // cout << "\n";
    for (int i = 0; i <= nodes; i++) {
        for(auto x : adj[i]) {
            transposeadj[x].push_back(i);
        }
    }

    // printing(nodes, transposeadj);

    vector<bool> visited(nodes + 1, false);
    l = true;

    cout << "[Strongly Connected Components]\n";
    for(auto x : decOutTime) {
        if(!visited[x]) {
            dfs(x, visited);
            cout << "\n";
        }
    }

}

void solve() {
    adj->clear();
    int nodes, edges;
    cin >> nodes >> edges;

    while (edges--) {
        int u, v;
        cin >> u >> v;

        adj[u].push_back(v);
    }

    // printing(nodes);
    stronglyConnectedCompenent(nodes);
}
 
void start()            
{
    ios_base::sync_with_stdio(false); cin.tie(NULL);
 
    #ifndef ONLINE_JUDGE
        // file input
            freopen("input.txt", "r", stdin);
        // output file
            freopen("output.txt", "w",stdout);
    #endif
 
}
 
int main()
{
    start();

    int tt = 1;
    // cin >> tt;
 
    while(tt--)
    {
        solve();
    }
 
    return 0;
}
