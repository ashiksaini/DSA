/*			COUNTING SORT	(18-01-2021)
 *
 *		- Non Comparision based algorithm.
 *		- Stable algo.
 *		- The idea of Radix Sort is to do digit by digit sort starting from least significant digit to most significant digit. 
 *			Radix sort uses counting sort as a subroutine to sort.
 *		- This algo is used for futher excess the range in the counting sort.
 *		
 *			TC : O(nk)		k : mx digit of the element
 *			AS : O(nk)
 */
#include<bits/stdc++.h>
using namespace std;

void countSort(vector<int>& arr,int n, int exp) { 
    int output[n]; // output array 
    int i, count[10] = { 0 }; 
  
    // Store count of occurrences in count[] 
    for (i = 0; i < n; i++) 
        count[(arr[i] / exp) % 10]++; 
  
    // Change count[i] so that count[i] now contains actual 
    //  position of this digit in output[] 
    for (i = 1; i < 10; i++) 
        count[i] += count[i - 1]; 
  
    // Build the output array 
    for (i = n - 1; i >= 0; i--) { 
        output[count[(arr[i] / exp) % 10] - 1] = arr[i]; 
        count[(arr[i] / exp) % 10]--; 
    } 
  
    // Copy the output array to arr[], so that arr[] now 
    // contains sorted numbers according to current digit 
    for (i = 0; i < n; i++) 
        arr[i] = output[i]; 
}

void radixsort(vector<int>& v, int n) {
	int mx = INT32_MIN;
	
	for(int i = 0; i < v.size(); i++)
		mx = max(mx, v[i]);
		
	for(int exp = 1; mx / exp > 0; exp *= 10)
		 countSort(v, n, exp);
}

void start() {
	
    ios_base::sync_with_stdio(false); cin.tie(NULL);

    #ifndef ONLINE_JUDGE
        // file input
            freopen("input10.txt", "r", stdin);
        // output file
            freopen("output.txt", "w",stdout);
    #endif
 } 
 

int main() {
	
	start();
	int n;
	cin >> n;
	
	vector<int> ar(n);
	for(int i = 0; i < n; i++)	cin >> ar[i];

	radixsort(ar, n);

	for(int i = 0; i < n; i++)	cout << ar[i] << " ";
	return 0;
}


