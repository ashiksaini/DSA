/**				QUICK SORT	(16-01-2021)
 *	
 *	Divide and Conquer algo.
 *	Key feature is partition the array.
 *	Mostly used general purpose sorting algo. like array.....
 *	TC : * Avg. case : O(n log n)
 *		 * worst case : O(n^2)
 *	
 *	There are 3 partition algorithm to partition the array.
 *	1. Navie 			: We simple seperate the 2 half left <= pivot & right > pivot with the help of temp array
 *							and copy back in the main array.
 *						
 *						TC : 3 * O(n)
 *						AS : O(n)
 *
 *	2. Lomuto partition	: We choose pivot as the last element and we seperate the two half (mentioned above) by using 
 *							that pivot element and last we swap the pivot with the mid element between the halfs.
 *
 *						Pivot : Last element. (Location of Pivot is fixed)
 *						TC : O(n)
 *						AS : O(1) 
 *
 *	3. Hoare's partition : This is much better than the Lomuto partition. We choose the first element as pivot and
 *							by two pointer approch we seperate the two halfs.
 *
 *						Pivot : First element. (Location is not fixed)
 *						TC : O(n)
 *						AS : O(1)
**/

#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono;

/**
 * Quick sort using lomuto partition
**/
int lomutoPartition(int v[], int l, int h)
{
	int p = v[h];
	int j = l - 1;
	
	for(int i = l; i < h; i++)
	{
		if(v[i] <= p)
		{
			j++;
			swap(v[i], v[j]);
		}
	}
	
	swap(v[j + 1], v[h]);
	return j + 1;
}

void quickSortLomuto(int v[], int l, int h)
{
	if(l < h)
	{
		int p = lomutoPartition(v, l, h);
		
		quickSortLomuto(v, l, p - 1);
		quickSortLomuto(v, p + 1, h);
	}
}


/**
 * Quick sort using hoare partition
**/
int hoarePartition(int v[], int l, int h)
{
	int p = v[l];
	int i = l - 1, j = h + 1;
	
	while(true)
	{
		do
		{
			i++;
		}while(v[i] < p);
		
		do
		{
			j--;
		}while(v[j] > p);
		
		if(i >= j)	return j;
		swap(v[i], v[j]);
	}
}

void quickSortHoare(int v[], int l, int h)
{
	if(l < h)
	{
		int p = hoarePartition(v, l, h);
		
		quickSortHoare(v, l, p);
		quickSortHoare(v, p + 1, h);
	}
}


/**
 * Printing the array
**/
void print(int v[], int n)
{
	for(int i = 0; i < n; i++)
		cout << v[i] << " ";
	cout << "\n";
}

/**
 * Fast I/O
**/
void start()
{
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

    #ifndef ONLINE_JUDGE
        // file input
            freopen("input10.txt", "r", stdin);
        // output file
            freopen("output.txt", "w",stdout);
    #endif

}

int main()
{
	start();
	int n;
	cin >> n;
	
	int v[n];
	for(int i = 0; i < n; i++)	cin >> v[i];
	
	/*
		*Quick Sort form Navie approach
	quickSort(v, 0, n - 1);
	print(v, n);
	*/
	
	auto start = high_resolution_clock::now(); 

	/*
		*Quick Sort from Lomuto Partition
	quickSortLomuto(v, 0, n - 1);
	print(v, n);
	*/

	auto stop = high_resolution_clock::now(); 
    auto duration = duration_cast<microseconds>(stop - start); 
  
    cout << "Time taken by function: " << duration.count() << " microseconds" << endl;

	/*
		*Quick Sort from Hoare Partition
	quickSortHoare(v, 0, n - 1);
	print(v, n);
	*/

	return 0;
}
