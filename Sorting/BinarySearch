/*			BINARY SEARCH 		(04-12-20)
 *		
 *	If we have a sorted array and we wish to find a element in that array. We can use binary search 
 *	what is does is if the element present in the array it will return its poisition otherwise it will return -1;
 *	
 *	So, if we going to find a element then there is 3 cases arises if the element is present in the array.
 *			1. the element is present in the mid of the array.
 *			2. the element is present in the left form the mid pos.
 *			3. the element is present in the right form the mid pos.
 *
 *	There are 2 ways by which we can do binary search.
 *		1. Iterative
 *			TC : O(log n)		for successful search.
 *			TC : theta(log n) 	for unsuccessful search.
 *			AS : O(1)
 *		2. Recursive
 *			TC : O(log n)		for successful search.
 *			TC : theta(log n) 	for unsuccessful search.
 *			AS : O(log n)
 */
 
 #include<bits/stdc++.h>
 
 using namespace std;
 
 int searchBinaryIterative(int arr[], int n, int x)
 {
 	int l = 0, r = n - 1;
 	
 	while(l <= r)
 	{
 		int mid = (l + r) / 2;
 		
 		if(x == arr[mid])		return mid + 1;
 		else if(x > arr[mid])	l = mid + 1;
 		else					r = mid - 1;
	}
	
	return -1;
 }
 
 int searchBinaryRecursive(int arr[], int f, int l, int x)
 {
 	if(f <= l)
 	{
	 	int mid = (f + l) / 2;
	 	
	 	if(x == arr[mid])		return mid + 1;
	 	else if(x > arr[mid])	return searchBinaryRecursive(arr, mid + 1, l, x);
	 	else 					return searchBinaryRecursive(arr, 0, mid - 1, x);
 	}
 	
	return -1;
 }	
 
 int main()
 {
	int n;
	cin >> n;
 	
	int arr[n];
	for(int i = 0; i < n; i++)
		cin >> arr[i];
	
	int x;	
	cout << "Enter ele wanna search : ";
	cin >> x;
	
	cout << searchBinaryIterative(arr, n, x) << "\n";	
	cout << searchBinaryRecursive(arr, 0, n - 1, x) << "\n";
 		
 	return 0;
