/**				09-01-2021	(INTERSECTION OF TWO ARRAY)
 *
 *	In this problem we have to find the intersection element in these
 *	two array. Intersection means commmon element in these two array.
 *	and the final array contain no duplicate.
 *
 *	There are two approaches :-
 *	1. Navie : Pick the element from the first array and search in the 2nd array.
 *					This approach works for any arrays.
 *		TC : O(n * m)
 *
 *	2. Better : Using the logic behind merge fucntion.
 *					This approach works for if the array is sorted.
 *		TC : theta(n + m)
 *
 **/
 
#include<bits/stdc++.h>
using namespace std;

vector<int> solveNavie(int a[], int b[], int n, int m)
{
	vector<int> ans;
	for(int i = 0; i < n; i++)
	{
		if(i > 0 && a[i] == a[i - 1])		//checking the duplicate
			continue;
		for(int j = 0; j < m; j++)
		{
			if(a[i] == b[j])
			{
				ans.push_back(a[i]);
				break;
			}
		}
	}
	
	return ans;
}

vector<int> solveBetter(int a[], int b[], int n, int m)
{
	vector<int> ans;
	int i = 0, j = 0;
	
	while(i < n && j < m)
	{
		if(i > 0 && a[i] == a[i - 1])		//checking the duplicate
		{
			i++;
			continue;
		}
		
		else if(a[i] < b[j])
		{
			i++;
		}
		else if(a[i] == b[j])
		{
			ans.push_back(a[i]);
			i++, j++;
		}
		else 
		{
			j++;
		}
	}
	
	return ans;	
} 
 
int main()
{
	// @param  n, m is the size of the array
	int n, m;
	cin >> n >> m;
	
	// @param a[n], b[m] are the arrays.
	int a[n], b[m];
	for(int i = 0; i < n; i++)	cin >> a[i];
	for(int i = 0; i < m; i++)	cin >> b[i];
	
	// func for navie
	vector<int> ans1;
	ans1 = solveNavie(a, b, n, m);
	
	// func for better
	vector<int> ans2;
	ans2 = solveBetter(a, b, n, m);
	
	for(int i = 0; i < ans1.size(); i++)	cout << ans1[i] << " ";
	cout << "\n";
	for(int i = 0; i < ans2.size(); i++)	cout << ans2[i] << " ";
	
	return 0;
}
 
